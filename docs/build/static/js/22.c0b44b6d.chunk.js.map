{"version":3,"sources":["pages/hooks-test/UseState.jsx"],"names":["config","path","title","console","log","useState","a","setA","b","setB","c","setC","useEffect","onClick","Promise","resolve","then","name","age","Math","random"],"mappings":"wLAKeA,sBAAO,CAClBC,KAAM,aACNC,MAAO,aAFIF,EAGZ,WAECG,QAAQC,IAAI,aAFP,MAIaC,mBAAS,IAJtB,mBAIEC,EAJF,KAIKC,EAJL,OAKaF,mBAAS,GALtB,mBAKEG,EALF,KAKKC,EALL,OAMaJ,mBAAS,GANtB,mBAMEK,EANF,KAMKC,EANL,KAqBL,OAPAC,qBAAU,WALNT,QAAQC,IAAI,MAAOE,GACnBH,QAAQC,IAAI,MAAOI,GACnBL,QAAQC,IAAI,MAAOM,KAKpB,CACCJ,EACAE,EACAE,IAGA,kBAAC,IAAD,KACI,6BACI,6BAAQG,QAAS,WASH,IAAIC,SAAQ,SAACC,GACnBA,EAAQ,MAIVC,MAAK,WACHT,EAAK,CAACU,KAAM,eAAMC,IAAK,KACvBT,EAAKU,KAAKC,UACVT,EAAK,QAjBb,+BAgCA,6BAAQE,QAAS,WACbN,EAAK,GACLA,EAAK,GACLA,EAAK,GACLA,EAAK,KAJT","file":"static/js/22.c0b44b6d.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {Button} from 'antd';\nimport config from 'src/commons/config-hoc';\nimport PageContent from 'src/layouts/page-content';\n\nexport default config({\n    path: '/use-state',\n    title: 'Use State',\n})(() => {\n    // 每次组件更新，函数都会被调用一次\n    console.log('use state');\n\n    const [a, setA] = useState({});\n    const [b, setB] = useState(0);\n    const [c, setC] = useState(0);\n\n    function handleSearch() {\n        console.log('a: ', a);\n        console.log('b: ', b);\n        console.log('c: ', c);\n    }\n\n    useEffect(() => {\n        handleSearch();\n    }, [\n        a,\n        b,\n        c,\n    ]);\n    return (\n        <PageContent>\n            <div>\n                <Button onClick={() => {\n                    // setState在原生事件，setTimeout，setInterval，Promise等异步操作中，state会同步更新\n                    // 在React环境之外就会同步更新\n\n                    // 只会触发一次render\n                    // setA({name: '张三', age: 12});\n                    // setB(Math.random());\n                    // setC(1);\n\n                    const p = new Promise((resolve) => {\n                        resolve(1);\n                    });\n\n                    // promise 回调中触发三次\n                    p.then(() => {\n                        setA({name: '张三', age: 12});\n                        setB(Math.random());\n                        setC(1);\n                    });\n\n                    // 放到setTimeout中就会触发3次render\n                    // 定时器中的setState没走react的事物机制，执行时批量更新没被设置true，所以每次都直接render了。\n                    // 原生事件和定时器一样\n                    // React 事件中会走事务机制\n\n                    // setTimeout(() => {\n                    //     setA({name: '张三', age: 12});\n                    //     setB(Math.random());\n                    //     setC(1);\n                    // });\n                }}>同时设置ABC</Button>\n\n                <Button onClick={() => {\n                    setA(2);\n                    setA(3);\n                    setA(4);\n                    setA(5);\n                }}>多次设置A</Button>\n            </div>\n        </PageContent>\n    );\n});\n"],"sourceRoot":""}